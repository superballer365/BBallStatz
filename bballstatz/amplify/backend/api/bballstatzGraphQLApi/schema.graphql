type Player @model {
  id: ID!
  firstName: String!
  lastName: String!
  perGameStats: PerGameStats @function(name: "statsFunctionResolver-${env}")
  mat: Float @function(name: "customAdvancedStatResolver-${env}")
}

type PerGameStats {
  points: Float!
  rebounds: Float!
  assists: Float!
}

type Team {
  id: ID!
  abbreviation: String!
  city: String!
  conference: String!
  division: String!
  name: String!
  fullName: String!
}

type GameScore {
  id: ID!
  date: String!
  homeTeam: Team!
  awayTeam: Team!
  homeScore: Int!
  awayScore: Int!
  period: Int!
  isOver: Boolean!
  postSeason: Boolean!
}

type BoxScore {
  gameScore: GameScore
  homePlayerStatlines: [PlayerStatline]!
  awayPlayerStatlines: [PlayerStatline]!
}

type PlayerStatline {
  id: ID!
  minutes: String!
  firstName: String!
  lastName: String!
  assists: Int!
  blocks: Int
  points: Int
  rebounds: Int
  steals: Int
  turnovers: Int
  threesAttempted: Float
  threesMade: Int
  threePercentage: Float
  fieldGoalsAttempted: Int!
  fieldGoalsMade: Int!
  fieldGoalPercentage: Float!
  freethrowsAttempted: Int!
  freethrowsMade: Int!
  freethrowPercentage: Float!
  fouls: Int!
}

type Query {
  getGameScores(date: String!): [GameScore]! @function(name: "gameScoreFunctionResolver-${env}")
  getBoxScore(gameId: String!): BoxScore @function(name: "boxScoreFunctionResolver-${env}")
}